/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.aribeiro.imagannot;

import org.aribeiro.imagannot.shapes.RoundLabel;
import org.aribeiro.imagannot.shapes.SquareLabel;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;
import org.aribeiro.imagannot.utils.ImageExporter;

/**
 *
 * @author Miguel
 */
public class Main extends javax.swing.JFrame {

    enum AnnotationShape {

        SQUARE,
        ROUND;
    }

    private final Map<Integer, JLabel> jlabelMap = new HashMap<>();

    private static int count = 0;

    private Color labelBackground = Color.WHITE;
    private Color labelLetterColor = Color.BLACK;
    private Color labelBorderColor = Color.BLACK;
    private AnnotationShape annotationShape = AnnotationShape.SQUARE;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        table.setModel(new DefaultTableModel(new String[]{"key", "value"}, 0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        fileChooser = new javax.swing.JFileChooser();
        colorChooser = new javax.swing.JColorChooser();
        annotationShapeGroup = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        imagePanel = new javax.swing.JPanel();
        imageLayeredPanel = new javax.swing.JLayeredPane();
        imageLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        squareShapeRadioButton = new javax.swing.JRadioButton();
        roundShapeRadioButton = new javax.swing.JRadioButton();
        backgroundSelectButton = new javax.swing.JButton();
        letterColorSelectButton = new javax.swing.JButton();
        borderColorSelectButton = new javax.swing.JButton();
        deleteAnnotationButton = new javax.swing.JButton();
        topMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadFromDiskMenuOption = new javax.swing.JMenuItem();
        loadFromClipboardMenuOption = new javax.swing.JMenuItem();
        exportToDiskMenuOption = new javax.swing.JMenuItem();
        exportToClipboardMenuOption = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1200, 750));

        imagePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 255)));
        imagePanel.setLayout(new javax.swing.OverlayLayout(imagePanel));

        imageLayeredPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageLayeredPanelMouseClicked(evt);
            }
        });

        imageLabel.setForeground(new java.awt.Color(102, 255, 102));
        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout imageLayeredPanelLayout = new javax.swing.GroupLayout(imageLayeredPanel);
        imageLayeredPanel.setLayout(imageLayeredPanelLayout);
        imageLayeredPanelLayout.setHorizontalGroup(
            imageLayeredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
        );
        imageLayeredPanelLayout.setVerticalGroup(
            imageLayeredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
        );
        imageLayeredPanel.setLayer(imageLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        imagePanel.add(imageLayeredPanel);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(table);

        jToolBar1.setFloatable(false);

        annotationShapeGroup.add(squareShapeRadioButton);
        squareShapeRadioButton.setSelected(annotationShape == AnnotationShape.SQUARE);
        squareShapeRadioButton.setText("Square");
        squareShapeRadioButton.setFocusable(false);
        squareShapeRadioButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        squareShapeRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                squareShapeRadioButtonStateChanged(evt);
            }
        });
        jToolBar1.add(squareShapeRadioButton);

        annotationShapeGroup.add(roundShapeRadioButton);
        roundShapeRadioButton.setSelected(annotationShape == AnnotationShape.ROUND);
        roundShapeRadioButton.setText("Round");
        roundShapeRadioButton.setFocusable(false);
        roundShapeRadioButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        roundShapeRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                roundShapeRadioButtonStateChanged(evt);
            }
        });
        jToolBar1.add(roundShapeRadioButton);

        backgroundSelectButton.setText("Item Background");
        backgroundSelectButton.setFocusable(false);
        backgroundSelectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backgroundSelectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        backgroundSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundSelectButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(backgroundSelectButton);

        letterColorSelectButton.setText("Item letter");
        letterColorSelectButton.setFocusable(false);
        letterColorSelectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        letterColorSelectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        letterColorSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                letterColorSelectButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(letterColorSelectButton);

        borderColorSelectButton.setText("Item border");
        borderColorSelectButton.setFocusable(false);
        borderColorSelectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        borderColorSelectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, squareShapeRadioButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), borderColorSelectButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        borderColorSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borderColorSelectButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(borderColorSelectButton);

        deleteAnnotationButton.setText("Delete");
        deleteAnnotationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAnnotationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addComponent(deleteAnnotationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteAnnotationButton))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        loadFromDiskMenuOption.setText("Load from disk");
        loadFromDiskMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFromDiskMenuOptionActionPerformed(evt);
            }
        });
        fileMenu.add(loadFromDiskMenuOption);

        loadFromClipboardMenuOption.setText("Load from clipboard");
        loadFromClipboardMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFromClipboardMenuOptionActionPerformed(evt);
            }
        });
        fileMenu.add(loadFromClipboardMenuOption);

        exportToDiskMenuOption.setText("Export image to disk");
        exportToDiskMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportToDiskMenuOptionActionPerformed(evt);
            }
        });
        fileMenu.add(exportToDiskMenuOption);

        exportToClipboardMenuOption.setText("Export image to clipboard");
        fileMenu.add(exportToClipboardMenuOption);

        topMenu.add(fileMenu);

        setJMenuBar(topMenu);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadFromDiskMenuOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFromDiskMenuOptionActionPerformed
        // TODO add your handling code here:
        int showOpenDialog = fileChooser.showOpenDialog(this);
        if (showOpenDialog == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            try {
                BufferedImage read = ImageIO.read(f);
                loadImage(read);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_loadFromDiskMenuOptionActionPerformed

    private void backgroundSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundSelectButtonActionPerformed
        // TODO add your handling code here:
        Color showDialog = JColorChooser.showDialog(this, "", labelBackground);
        if (showDialog != null) {
            labelBackground = showDialog;
        }
    }//GEN-LAST:event_backgroundSelectButtonActionPerformed

    private void letterColorSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_letterColorSelectButtonActionPerformed
        // TODO add your handling code here:
        Color showDialog = JColorChooser.showDialog(this, "", labelLetterColor);
        if (showDialog != null) {
            labelLetterColor = showDialog;
        }
    }//GEN-LAST:event_letterColorSelectButtonActionPerformed

    private void borderColorSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borderColorSelectButtonActionPerformed
        // TODO add your handling code here:
        Color showDialog = JColorChooser.showDialog(this, "", labelBorderColor);
        if (showDialog != null) {
            labelBorderColor = showDialog;
        }
    }//GEN-LAST:event_borderColorSelectButtonActionPerformed

    private void exportToDiskMenuOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportToDiskMenuOptionActionPerformed
        // TODO add your handling code here:
        int showSaveDialog = fileChooser.showSaveDialog(this);

        if (JFileChooser.APPROVE_OPTION == showSaveDialog) {
            String absolutePath = fileChooser.getSelectedFile().getAbsolutePath();
            ImageExporter.savePanelAsImage(imagePanel, absolutePath);
        }
    }//GEN-LAST:event_exportToDiskMenuOptionActionPerformed

    private void addAnnotation(String labelStr, int x, int y) {

        //final JLabel label = new JLabel(labelStr);
        final JLabel label;

        if (annotationShape == AnnotationShape.SQUARE) {
            label = new SquareLabel(labelStr, labelBackground, labelLetterColor, new LineBorder(labelBorderColor));
        } else {
            label = new RoundLabel(labelStr, labelBackground, labelLetterColor);
        }

        imageLayeredPanel.add(label, JLayeredPane.DRAG_LAYER);
        label.setLocation(x, y);

        System.out.println("Adding to " + x + " " + y);

        jlabelMap.put(count, label);

        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new String[]{count + "", ""});

        label.addMouseMotionListener(new MouseMotionListener() {

            @Override
            public void mouseDragged(MouseEvent e) {
                Component c = e.getComponent();

                int moveToX = c.getX() + e.getX();
                int moveToY = c.getY() + e.getY();

                c.setLocation(moveToX, moveToY);
                System.out.println("Moving to " + moveToX + " " + moveToY);
            }

            @Override
            public void mouseMoved(MouseEvent e) {
            }
        });
    }

    private void imageLayeredPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageLayeredPanelMouseClicked
        count++;
        addAnnotation(count + "", evt.getX(), evt.getY());

    }//GEN-LAST:event_imageLayeredPanelMouseClicked

    private void deleteAnnotationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAnnotationButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int selectedRow = table.getSelectedRow();

        String value = model.getValueAt(selectedRow, 0).toString();

        int intValueToRemove = Integer.valueOf(value);
        
        model.removeRow(selectedRow);
        JLabel labelToRemove = jlabelMap.remove(intValueToRemove);
        Container parent = labelToRemove.getParent();
        
        boolean hasNext = true;
        
        do {
            
            intValueToRemove++;
            
            if (jlabelMap.containsKey(intValueToRemove)) {
                
                JLabel label = jlabelMap.get(intValueToRemove);
                
                int newIntValue = intValueToRemove - 1;
                String newStringValue = String.valueOf(intValueToRemove - 1);
                
                label.setText(newStringValue);
                jlabelMap.put(newIntValue, label);
                
            } else {
                hasNext = false;
            }
            
        } while(hasNext);
        
        count--;
        jlabelMap.remove(intValueToRemove - 1);
        
        
        updateTable();
        parent.remove(labelToRemove);
        parent.validate();
        parent.repaint();


    }//GEN-LAST:event_deleteAnnotationButtonActionPerformed

    private void updateTable() {
        DefaultTableModel model = new DefaultTableModel(new String[]{"key", "value"}, 0);
        
        for (int i = 1 ; i <= count; i++) {
            model.addRow(new String[]{String.valueOf(i), ""});
        }
        
        table.setModel(model);
        
    }
    
    private void squareShapeRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_squareShapeRadioButtonStateChanged
        defineShape();
    }//GEN-LAST:event_squareShapeRadioButtonStateChanged

    private void roundShapeRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_roundShapeRadioButtonStateChanged
        defineShape();
    }//GEN-LAST:event_roundShapeRadioButtonStateChanged

    private void loadFromClipboardMenuOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFromClipboardMenuOptionActionPerformed
        BufferedImage imageFromClipboard = getImageFromClipboard();
        if (imageFromClipboard != null) {
            loadImage(imageFromClipboard);
        }
    }//GEN-LAST:event_loadFromClipboardMenuOptionActionPerformed

    private void defineShape() {
        annotationShape = squareShapeRadioButton.isSelected() ? AnnotationShape.SQUARE : AnnotationShape.ROUND;
    }

    public double getScaleFactor(int iMasterSize, int iTargetSize) {

        double dScale;
        if (iMasterSize > iTargetSize) {
            dScale = (double) iTargetSize / (double) iMasterSize;
        } else {
            dScale = (double) iTargetSize / (double) iMasterSize;
        }

        return dScale;

    }

    private void loadImage(BufferedImage bufferedImage) {

        int width = bufferedImage.getWidth();
        int height = bufferedImage.getHeight();

        Dimension imageSize = new Dimension(width, height);
        Dimension labelSize = imageLabel.getSize();

        double resizeFactor = getScaleFactorToFit(imageSize, labelSize);

        Image dimg = bufferedImage.getScaledInstance(Math.round(Math.round(imageSize.getWidth() * resizeFactor)),
                Math.round(Math.round(imageSize.getHeight() * resizeFactor)),
                Image.SCALE_SMOOTH);

        imageLabel.setIcon(new ImageIcon(dimg));
    }

    public double getScaleFactorToFit(Dimension original, Dimension toFit) {

        double dScale = 1d;

        if (original != null && toFit != null) {

            double dScaleWidth = getScaleFactor(original.width, toFit.width);
            double dScaleHeight = getScaleFactor(original.height, toFit.height);

            dScale = Math.min(dScaleHeight, dScaleWidth);

        }

        return dScale;
    }

    public AnnotationShape getAnnotationShape() {
        return annotationShape;
    }

    /**
     * Get an image off the system clipboard.
     *
     * @return Returns an Image if successful; otherwise returns null.
     */
    public BufferedImage getImageFromClipboard() {
        Transferable transferable = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);
        if (transferable != null && transferable.isDataFlavorSupported(DataFlavor.imageFlavor)) {
            try {
                return (BufferedImage) transferable.getTransferData(DataFlavor.imageFlavor);
            } catch (UnsupportedFlavorException e) {
                // handle this as desired
                e.printStackTrace();
            } catch (IOException e) {
                // handle this as desired
                e.printStackTrace();
            }
        }
        return null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Mac OS X".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup annotationShapeGroup;
    private javax.swing.JButton backgroundSelectButton;
    private javax.swing.JButton borderColorSelectButton;
    private javax.swing.JColorChooser colorChooser;
    private javax.swing.JButton deleteAnnotationButton;
    private javax.swing.JMenuItem exportToClipboardMenuOption;
    private javax.swing.JMenuItem exportToDiskMenuOption;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLayeredPane imageLayeredPanel;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton letterColorSelectButton;
    private javax.swing.JMenuItem loadFromClipboardMenuOption;
    private javax.swing.JMenuItem loadFromDiskMenuOption;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JRadioButton roundShapeRadioButton;
    private javax.swing.JRadioButton squareShapeRadioButton;
    private javax.swing.JTable table;
    private javax.swing.JMenuBar topMenu;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
